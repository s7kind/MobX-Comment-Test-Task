{"ast":null,"code":"import { types, flow } from \"mobx-state-tree\";\nimport axios from \"axios\";\nconst Person = types.model({\n  id: types.maybe(types.integer),\n  name: types.string,\n  birthYear: types.string,\n  comment: types.maybe(types.string)\n});\nconst PersonStore = types.model({\n  persons: types.array(Person),\n  isLoading: types.boolean\n}).actions(_c = self => ({\n  fetchPersons: flow(function* fetchPersons() {\n    self.persons = [];\n    self.isLoading = true;\n    let arr = [];\n\n    try {\n      const res = yield axios.get(`https://swapi.dev/api/people/`).then(_ref => {\n        let {\n          data\n        } = _ref;\n        Object.keys(data.results).map((key, index) => {\n          let dataRes = data.results[key];\n          let obj = {\n            id: index,\n            name: dataRes.name,\n            birthYear: dataRes.birth_year,\n            comment: ''\n          };\n          arr.push(obj);\n        });\n      });\n      self.isLoading = false;\n      self.persons = arr;\n    } catch (error) {\n      console.error(\"Failed to fetch persons\", error);\n    }\n  }),\n\n  addComment(id, text) {\n    self.persons[id].comment = text.toString();\n  },\n\n  deleteComment(id) {\n    self.persons[id].comment = '';\n  }\n\n}));\n_c2 = PersonStore;\nexport default PersonStore;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PersonStore$types\\n    .model({\\n        persons: types.array(Person),\\n        isLoading: types.boolean\\n    })\\n    .actions\");\n$RefreshReg$(_c2, \"PersonStore\");","map":{"version":3,"sources":["/Users/msqred/Desktop/react-test-mst/src/store/PersonStore.js"],"names":["types","flow","axios","Person","model","id","maybe","integer","name","string","birthYear","comment","PersonStore","persons","array","isLoading","boolean","actions","self","fetchPersons","arr","res","get","then","data","Object","keys","results","map","key","index","dataRes","obj","birth_year","push","error","console","addComment","text","toString","deleteComment"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,IAAf,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAGH,KAAK,CAACI,KAAN,CAAY;AACvBC,EAAAA,EAAE,EAAEL,KAAK,CAACM,KAAN,CAAYN,KAAK,CAACO,OAAlB,CADmB;AAEvBC,EAAAA,IAAI,EAAER,KAAK,CAACS,MAFW;AAGvBC,EAAAA,SAAS,EAAEV,KAAK,CAACS,MAHM;AAIvBE,EAAAA,OAAO,EAAEX,KAAK,CAACM,KAAN,CAAYN,KAAK,CAACS,MAAlB;AAJc,CAAZ,CAAf;AAOA,MAAMG,WAAW,GAAGZ,KAAK,CACpBI,KADe,CACT;AACHS,EAAAA,OAAO,EAAEb,KAAK,CAACc,KAAN,CAAYX,MAAZ,CADN;AAEHY,EAAAA,SAAS,EAAEf,KAAK,CAACgB;AAFd,CADS,EAKfC,OALe,MAKPC,IAAI,KAAK;AACdC,EAAAA,YAAY,EAAElB,IAAI,CAAC,UAAUkB,YAAV,GAAyB;AACxCD,IAAAA,IAAI,CAACL,OAAL,GAAe,EAAf;AACAK,IAAAA,IAAI,CAACH,SAAL,GAAiB,IAAjB;AACA,QAAIK,GAAG,GAAG,EAAV;;AACA,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAW,+BAAX,EACbC,IADa,CACR,QAAY;AAAA,YAAX;AAACC,UAAAA;AAAD,SAAW;AACdC,QAAAA,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,OAAjB,EAA0BC,GAA1B,CAA8B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1C,cAAIC,OAAO,GAAGP,IAAI,CAACG,OAAL,CAAaE,GAAb,CAAd;AACA,cAAIG,GAAG,GAAG;AACN3B,YAAAA,EAAE,EAAEyB,KADE;AAENtB,YAAAA,IAAI,EAAEuB,OAAO,CAACvB,IAFR;AAGNE,YAAAA,SAAS,EAAEqB,OAAO,CAACE,UAHb;AAINtB,YAAAA,OAAO,EAAE;AAJH,WAAV;AAMAS,UAAAA,GAAG,CAACc,IAAJ,CAASF,GAAT;AACH,SATD;AAUH,OAZa,CAAlB;AAaAd,MAAAA,IAAI,CAACH,SAAL,GAAiB,KAAjB;AACAG,MAAAA,IAAI,CAACL,OAAL,GAAeO,GAAf;AAEH,KAjBD,CAiBE,OAAOe,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACH;AACJ,GAxBiB,CADJ;;AA0BdE,EAAAA,UAAU,CAAChC,EAAD,EAAKiC,IAAL,EAAW;AACjBpB,IAAAA,IAAI,CAACL,OAAL,CAAaR,EAAb,EAAiBM,OAAjB,GAA2B2B,IAAI,CAACC,QAAL,EAA3B;AACH,GA5Ba;;AA6BdC,EAAAA,aAAa,CAACnC,EAAD,EAAK;AACda,IAAAA,IAAI,CAACL,OAAL,CAAaR,EAAb,EAAiBM,OAAjB,GAA2B,EAA3B;AACH;;AA/Ba,CAAL,CALG,CAApB;MAAMC,W;AAuCN,eAAeA,WAAf","sourcesContent":["import {types, flow} from \"mobx-state-tree\";\nimport axios from \"axios\";\n\nconst Person = types.model({\n    id: types.maybe(types.integer),\n    name: types.string,\n    birthYear: types.string,\n    comment: types.maybe(types.string)\n});\n\nconst PersonStore = types\n    .model({\n        persons: types.array(Person),\n        isLoading: types.boolean\n    })\n    .actions(self => ({\n        fetchPersons: flow(function* fetchPersons() {\n            self.persons = [];\n            self.isLoading = true;\n            let arr = []\n            try {\n                const res = yield axios.get(`https://swapi.dev/api/people/`)\n                    .then(({data}) => {\n                        Object.keys(data.results).map((key, index) => {\n                            let dataRes = data.results[key];\n                            let obj = {\n                                id: index,\n                                name: dataRes.name,\n                                birthYear: dataRes.birth_year,\n                                comment: ''\n                            }\n                            arr.push(obj)\n                        });\n                    })\n                self.isLoading = false;\n                self.persons = arr;\n\n            } catch (error) {\n                console.error(\"Failed to fetch persons\", error);\n            }\n        }),\n        addComment(id, text) {\n            self.persons[id].comment = text.toString()\n        },\n        deleteComment(id) {\n            self.persons[id].comment = ''\n        }\n    }))\n\nexport default PersonStore"]},"metadata":{},"sourceType":"module"}